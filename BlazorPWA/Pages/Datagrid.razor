@page "/datagrid";
@using BlazorPWADomain.Models;


@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Datagrid</h3>

<button @onclick="ClearLocalStorage">Clear local storage</button>
<br/>
<br/>
<InputFile OnChange="@UploadFile" /> 
<br/>
<br/>
<table class="table table-striped table-bordered w-100">
    <tr>
        <th scope="col"></th>
        <th scope="col">Name</th>
        <th scope="col">Extension</th>
        <th scope="col">Size(bytes)</th>
    </tr>
    

    @foreach (var pic in Files)
    {
        <tr>
            <td>
                <img src="@pic.GetImageUrlFromBytes()" style="height: 50px;"/>
            </td>
            <th scope="row">
                <a @onclick="@(() => ShowFileObservableCard(@pic.Id))">@pic.Name</a>
            </th>
            <td>@pic.Extension</td>
            <td>@pic.Bytes.Length</td>
        </tr>
    }
</table>

@if (IsFileObservableCardVisible)
{
    <FileObservableCard 
        ClosePictureCard="CancelFileSave" SaveFileInfo="SaveFileInfo" 
        File="@Files!.First(x => x.Id == FileCardToShowId)"></FileObservableCard>

}

@code {
    public Guid FileCardToShowId { get; set; }
    public bool IsFileObservableCardVisible = false;
    public ObservableCollection<FileObservable> Files { get; set; } = new ObservableCollection<FileObservable>();

    //When the page is first loaded we then sets our Files list to what is stored in our local storage.
    protected override async Task OnInitializedAsync()
    {
        //If our local storage dosn't contain UploadedPictures then we set it to an empty ObservableCollection<FileObservableData>;
        if (!await localStorage.ContainKeyAsync("UploadedPictures"))
            await localStorage.SetItemAsync("UploadedPictures", new ObservableCollection<FileObservable>());
        Files = await localStorage.GetItemAsync<ObservableCollection<FileObservable>>("UploadedPictures");
    }

    //Clears local storage
    private async void ClearLocalStorage()
    {
        await localStorage.ClearAsync();
        await OnInitializedAsync();
    }

    //Shows the FileObservable card.
    private void ShowFileObservableCard(Guid id)
    {
        if (id == Guid.Empty || Files == null)
        {
            throw new NullReferenceException("Id not valid");
        }
        FileCardToShowId = Files.First(x => x.Id == id).Id;
        IsFileObservableCardVisible = true;

    }

    private void ToggleFileObservableCard()
    {
        IsFileObservableCardVisible = !IsFileObservableCardVisible;
    }

    private async void CancelFileSave()
    {
        ToggleFileObservableCard();
        //Resets our files collection to remove any changes med in the card.
        Files = await localStorage.GetItemAsync<ObservableCollection<FileObservable>>("UploadedPictures");
        StateHasChanged();
    }

    private async void UploadFile(InputFileChangeEventArgs e)
    {
        //Converts the selected fil to byte[].
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();

        //Creates a new FileObservable object.
        Files.Add(new FileObservable(e.File.Name, e.File.Name.Split(".").Last(), bytes));

        //Saves the changes to local storage.
        await localStorage.SetItemAsync<ObservableCollection<FileObservable>>("UploadedPictures", Files);

        //StateHasChanged is callede here because the list used dosn't update automaticly 
        StateHasChanged();
    }

    private async void SaveFileInfo()
    {
        //Closes the FileObservableCard.
        IsFileObservableCardVisible = false;
        //Saves the changes to local storage.
        await localStorage.SetItemAsync<ObservableCollection<FileObservable>>("UploadedPictures", Files);
    }
}
